#include <iostream>
#include <stdexcept>

using namespace std;

class Vector {
private:
    double* data;
    int size;
    int state;
    static int objectCount;

public:
    Vector() : size(1), state(0) {
        try {
            data = new double[1] {0.0};
            objectCount++;
        }
        catch (bad_alloc&) {
            data = nullptr;
            state = -1;
            cerr << "Error: memory lack!" << endl;
        }
    }

    Vector(int n) : size(n), state(0) {
        if (n <= 0) {
            cerr << "Error: wrong vector's size!" << endl;
            data = nullptr;
            size = 0;
            state = -1;
            return;
        }
        try {
            data = new double[n] {0.0};
            objectCount++;
        }
        catch (bad_alloc&) {
            data = nullptr;
            state = -1;
            cerr << "Error: memory lack!" << endl;
        }
    }

    Vector(int n, double value) : size(n), state(0) {
        if (n <= 0) {
            cerr << "Error: wrong vector's size!" << endl;
            data = nullptr;
            size = 0;
            state = -1;
            return;
        }
        try {
            data = new double[n];
            for (int i = 0; i < n; i++) data[i] = value;
            objectCount++;
        }
        catch (bad_alloc&) {
            data = nullptr;
            state = -1;
            cerr << "Error: memory lack!" << endl;
        }
    }

    Vector(const Vector& other) : size(other.size), state(other.state) {
        try {
            data = new double[size];
            for (int i = 0; i < size; i++) data[i] = other.data[i];
            objectCount++;
        }
        catch (bad_alloc&) {
            data = nullptr;
            state = -1;
            cerr << "Error: memory lack!" << endl;
        }
    }

    Vector& operator=(const Vector& other) {
        if (this == &other) return *this;

        delete[] data;

        size = other.size;
        state = other.state;
        try {
            data = new double[size];
            for (int i = 0; i < size; i++) data[i] = other.data[i];
        }
        catch (bad_alloc&) {
            data = nullptr;
            state = -1;
            cerr << "Error: memory lack!" << endl;
        }
        return *this;
    }

    ~Vector() {
        delete[] data;
        objectCount--;
    }

    void setElement(int index, double value = 0.0) {
        if (index < 0 || index >= size) {
            cerr << "Error: going beyong the array!" << endl;
            state = -1;
            return;
        }
        data[index] = value;
    }

    double getElement(int index) const {
        if (index < 0 || index >= size) {
            cerr << "Error: going beyong the array!" << endl;
            return 0.0;
        }
        return data[index];
    }

    void print() const {
        cout << "[ ";
        for (int i = 0; i < size; i++) {
            cout << data[i] << " ";
        }
        cout << "]" << endl;
    }

    Vector operator+(const Vector& other) const {
        int minSize = (size < other.size) ? size : other.size;
        Vector result(minSize);
        for (int i = 0; i < minSize; i++) {
            result.data[i] = data[i] + other.data[i];
        }
        return result;
    }

    Vector operator-(const Vector& other) const {
        int minSize = (size < other.size) ? size : other.size;
        Vector result(minSize);
        for (int i = 0; i < minSize; i++) {
            result.data[i] = data[i] - other.data[i];
        }
        return result;
    }

    Vector operator*(double scalar) const {
        Vector result(size);
        for (int i = 0; i < size; i++) {
            result.data[i] = data[i] * scalar;
        }
        return result;
    }

    Vector operator/(double scalar) const {
        if (scalar == 0) {
            cerr << "Error: /0!" << endl;
            return Vector(size);
        }
        Vector result(size);
        for (int i = 0; i < size; i++) {
            result.data[i] = data[i] / scalar;
        }
        return result;
    }

    bool operator==(const Vector& other) const {
        if (size != other.size) return false;
        for (int i = 0; i < size; i++) {
            if (data[i] != other.data[i]) return false;
        }
        return true;
    }

    bool operator<(const Vector& other) const {
        return size < other.size;
    }

    bool operator>(const Vector& other) const {
        return size > other.size;
    }

    static int getObjectCount() {
        return objectCount;
    }
};

int Vector::objectCount = 0;

int main() {
    Vector v1;
    Vector v2(5);
    Vector v3(5, 3.14);
    Vector v4(v3);

    cout << "Object count: " << Vector::getObjectCount() << endl;

    cout << "v1: ";
    v1.print();
    cout << "v2: ";
    v2.print();
    cout << "v3: ";
    v3.print();
    cout << "v4 (copy v3): ";
    v4.print();

    v2.setElement(2, 10.5);
    cout << "Value v2[2]: " << v2.getElement(2) << endl;

    Vector sum = v3 + v4;
    cout << "v3 + v4: ";
    sum.print();

    Vector diff = v3 - v4;
    cout << "v3 - v4: ";
    diff.print();

    Vector scaled = v3 * 2;
    cout << "v3 * 2: ";
    scaled.print();

    cout << "v3 = v4? " << (v3 == v4 ? "Так" : "Ні") << endl;

    cout << "Кількість об'єктів після виконання:Count of object after execution: " << Vector::getObjectCount() << endl;

    return 0;
}